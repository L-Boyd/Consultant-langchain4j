spring:
  application:
    name: Consultant
  data:
    redis:
      host: 192.168.1.10
      port: 6379
      password: ${REDIS-PASSWORD}
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.1.10:3306/volunteer_consultant?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: root
    password: ${MYSQL-PASSWORD}


langchain4j:
  open-ai:
    chat-model:
      base-url: https://dashscope.aliyuncs.com/compatible-mode/v1
      api-key: ${API-KEY}
      model-name: qwen-plus
      log-requests: true
      log-responses: true
    streaming-chat-model: # 流式调用相关配置
      base-url: https://dashscope.aliyuncs.com/compatible-mode/v1
      api-key: ${API-KEY}
      model-name: qwen-plus
      log-requests: true
      log-responses: true
    embedding-model: # 向量模型
      base-url: https://dashscope.aliyuncs.com/compatible-mode/v1
      api-key: ${API-KEY}
      model-name: text-embedding-v3
      log-requests: true
      log-responses: true
      max-segments-per-batch: 10  # 每次调用最多处理10个片段（百炼的这个模型最高一次能接收十个）

  # docker run --name redis-vector -d -p 6400:6379 redislabs/redisearch
  # docker run --name redis-vector -d -p 6401:6379 redis/redis-stack:latest redis-server --requirepass xxxxxxx
  # docker run --name redis-vector -d -p 6401:6379 redis/redis-stack:7.2.0-v19-arm64
  # langchain4j-community-redis-spring-boot-starter会检测到这段配置，自动往IOC容器中注入RedisEmbeddingStore
  community:
    redis:
      host: 192.168.1.10
      port: 6401

logging:
  level: # 日志级别，有ERROR、INFO、DEBUG
    dev.langchain4j: debug

mybatis:
  configuration:
    map-underscore-to-camel-case: true  # 驼峰命名自动转换